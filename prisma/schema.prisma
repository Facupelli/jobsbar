// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                String                 @id @default(cuid())
    name              String?
    email             String?                @unique
    emailVerified     DateTime?
    image             String?
    accounts          Account[]
    sessions          Session[]

    totalPoints       Int                    @default(0)
    totalPointsSpent  Int                    @default(0)
    role              Role?                  @relation(fields: [roleId], references: [id])
    roleId            String?
    membership        Membership?            @relation(fields: [membershipId], references: [id])
    membershipId      String?
    consumptions      ConsumptionOnUser[]
    promotions        PromotionOnUser[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// JOBSBAR

model Role {
    id          String @default(cuid()) @id
    name        String
    users       User[] 
}

model Membership {
  id                      String                @default(cuid()) @id
  name                    String                @unique
  minPoints               Int
  maxPoints               Int?
  users                   User[]
  promotions              Promotion[]
}

model ConsumptionCategory {
  id                      String                @default(cuid()) @id
  name                    String                @unique
  consumptions            Consumption[]
}

model Consumption {
  id                            String                      @default(cuid()) @id
  name                          String                      @unique
  consumptionCategory           ConsumptionCategory         @relation(fields: [consumptionCategoryId], references: [id])
  consumptionCategoryId         String
  points                        Int
  users                         ConsumptionOnUser[]
  promotions                    ConsumptionOnPromotion[]
}

model ConsumptionOnUser {
  id                      String            @default(cuid()) @id
  user                    User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                  String
  consumption             Consumption       @relation(fields: [consumptionId], references: [id], onDelete: Cascade)
  consumptionId           String
  winner                  Boolean?
  quantity                Int
  createdAt               DateTime          @default(now()) @map(name: "created_at")
}

model Promotion {
  id                      String                     @default(cuid()) @id
  name                    String 
  points                  Int
  discount                Int  
  active                  Boolean                    @default(true)
  memberships             Membership[]
  users                   PromotionOnUser[]
  consumptions            ConsumptionOnPromotion[]
}

model ConsumptionOnPromotion {
  consumption             Consumption       @relation(fields: [consumptionId], references: [id], onDelete: Cascade)
  consumptionId           String
  promotion               Promotion         @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  promotionId             String
  quantity                Int
  createdAt               DateTime          @default(now()) @map(name: "created_at")

  @@id([consumptionId, promotionId])
}

model PromotionOnUser {
  id                      String            @default(cuid()) @id
  promotion               Promotion         @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  promotionId             String
  user                    User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                  String
  quantity                Int
  createdAt               DateTime          @default(now()) @map(name: "created_at")
}


