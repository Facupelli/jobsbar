import Head from "next/head";
import Link from "next/link";
import superjason from "superjson";
import { type GetServerSideProps } from "next";
import { getServerSession } from "next-auth";
import { Dispatch, SetStateAction, useState } from "react";
import { authOptions } from "~/server/auth";
import { prisma } from "~/server/db";

import AdminLayout from "~/components/Admin/AdminLayout";
import Nav from "~/components/Nav";
import Table from "~/components/Table";

import {
  fetchAllConsumptionsByCategories,
  fetchAllPromotions,
} from "~/utils/admin";

import type { Consumption, Membership, Promotion, User } from "~/types/model";
import type { ConsumptionsGrouped } from "~/types/consumptionsByCategory";
import Modal from "~/components/Modal";
import { useForm } from "react-hook-form";
import { api } from "~/utils/api";
import { createProxySSGHelpers } from "@trpc/react-query/ssg";
import { appRouter } from "~/server/api/root";

type Props = {
  allConsumptionsByCategories: ConsumptionsGrouped[];
  allMemberships: Membership[];
  allPromotions: Promotion[];
  allConsumptions: Consumption[];
  allUsers: User[];
  usersCount: number;
};

export type Routes =
  | "home"
  | "memberships"
  | "consumptions"
  | "promotions"
  | "users";

export default function Admin({
  allMemberships,
  allConsumptionsByCategories,
  allPromotions,
  allConsumptions,
  allUsers,
  usersCount,
}: Props) {
  const memberships = api.membership.getAllMemberships.useQuery();
  const users = api.user.getAllUsers.useQuery();
  const promotions = api.promotions.getAllPromotions.useQuery();
  const consumptionsByCategories =
    api.consumptions.getConsumptionsGrouped.useQuery();

  const [route, setRoute] = useState<Routes>("home");

  if (
    !memberships.data ||
    !users.data ||
    !promotions.data ||
    !consumptionsByCategories.data
  ) {
    return <div>404</div>;
  }

  return (
    <div className="">
      <Head>
        <title>JOBS | Admin</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Nav route="admin" />

      <main className="min-h-screen bg-gray-200">
        <AdminLayout route={route} setRoute={setRoute}>
          {route === "memberships" && (
            <Memberships memberships={memberships.data} />
          )}
          {route === "consumptions" && (
            <Consumptions consumptions={consumptionsByCategories.data} />
          )}
          {route === "promotions" && (
            <Promotions
              // consumptions={consumptions}
              promotions={promotions.data}
            />
          )}
          {route === "users" && (
            <Users
              users={users.data?.allUsers}
              totalUsers={users.data?.usersCount}
            />
          )}
        </AdminLayout>
      </main>
    </div>
  );
}

function Memberships({ memberships }: { memberships: Membership[] }) {
  const [showModal, setShowModal] = useState(false);

  return (
    <>
      {showModal && (
        <Modal isOpen={showModal} handleCloseModal={() => setShowModal(false)}>
          <CreateMembership setShowModal={setShowModal} />
        </Modal>
      )}
      <section>
        <div className="flex items-center justify-between pb-6">
          <h1 className="p-3 text-lg font-semibold">Membresías</h1>
          <button
            type="button"
            onClick={() => setShowModal(true)}
            className="rounded bg-green-500 p-2 text-neutral-100"
          >
            Crear membresía
          </button>
        </div>
        <Table trTitles={["Nombre", "Puntos Mínimos", "Puntos Máximos"]}>
          {memberships.map((membership) => (
            <tr key={membership.id}>
              <td className="border-b border-gray-300 p-3">
                {membership.name}
              </td>
              <td className="border-b border-gray-300 p-3">
                {membership.minPoints}
              </td>
              <td className="border-b border-gray-300 p-3">
                {membership.maxPoints}
              </td>
              <td className="border-b border-gray-300 p-3">Editar</td>
              <td className="border-b border-gray-300 p-3">Eliminar</td>
            </tr>
          ))}
        </Table>
      </section>
    </>
  );
}

type MembershipData = {
  name: string;
  minPoints: number;
  maxPoints: number;
};
function CreateMembership({
  setShowModal,
}: {
  setShowModal: Dispatch<SetStateAction<boolean>>;
}) {
  const ctx = api.useContext();
  const { register, handleSubmit } = useForm<MembershipData>();
  const { mutate } = api.admin.postMembership.useMutation();

  const onSubmit = (data: MembershipData) => {
    mutate(data, {
      onSuccess: () => {
        setShowModal(false);
        ctx.membership.getAllMemberships.invalidate();
      },
    });
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="grid gap-4">
      <div className="grid gap-1">
        <label htmlFor="name">Nombre:</label>
        <input
          className="rounded border border-neutral-600 p-1"
          type="text"
          id="name"
          required
          {...register("name")}
        />
      </div>
      <div className="grid gap-1">
        <label htmlFor="minPoints">Puntos mínimos:</label>
        <input
          className="rounded border border-neutral-600 p-1"
          type="text"
          id="minPoints"
          required
          {...register("minPoints", { valueAsNumber: true })}
        />
      </div>
      <div className="grid gap-1">
        <label htmlFor="maxPoints">Puntos máximos:</label>
        <input
          className="rounded border border-neutral-600 p-1"
          type="text"
          id="maxPoints"
          required
          {...register("maxPoints", { valueAsNumber: true })}
        />
      </div>
      <button
        type="submit"
        className="rounded-sm bg-green-500 p-1 font-semibold text-neutral-100"
      >
        CREAR
      </button>
    </form>
  );
}

type Active = "Comida" | "Bebida" | "Juego";

function Consumptions({
  consumptions,
}: {
  consumptions: ConsumptionsGrouped[];
}) {
  const [active, setActive] = useState<Active>("Bebida");

  const selectedConsumption = consumptions.find(
    (category) => category.name === active
  );

  return (
    <section className="gap-10">
      <nav className="fixed left-[220px] top-[70px] h-[calc(100vh_-_70px)] w-[120px] bg-neutral-800">
        <ul className="grid gap-4 text-neutral-100">
          {consumptions.map((category) => (
            <li
              key={category.id}
              className={`p-4 ${
                active === category.name
                  ? "border-r-[6px] border-green-500 font-semibold"
                  : ""
              }`}
            >
              <button
                type="button"
                onClick={() => setActive(category.name as Active)}
              >
                {category.name}
              </button>
            </li>
          ))}
        </ul>
      </nav>
      <div className="ml-[120px]">
        <h1 className="p-3 text-lg font-semibold">{active}</h1>
        <Table trTitles={["Nombre", "Puntos"]}>
          {selectedConsumption?.consumptions.map((consumption) => (
            <tr key={consumption.name}>
              <td className="border-b border-gray-300 p-3">
                {consumption.name}
              </td>
              <td className="border-b border-gray-300 p-3">
                {consumption.points}
              </td>
              <td className="border-b border-gray-300 p-3">Editar</td>
              <td className="border-b border-gray-300 p-3">Eliminar</td>
            </tr>
          ))}
        </Table>
      </div>
    </section>
  );
}

function Promotions({
  // consumptions,
  promotions,
}: {
  // consumptions: Consumption[];
  promotions: {
    id: string;
    consumptions: {
      consumption: {
        consumptionCategory: {
          name: string;
        };
        name: string;
      };
    }[];
    name: string;
    points: number;
    memberships: {
      name: string;
    }[];
    discount: number;
  }[];
}) {
  return (
    <section>
      <h1 className="p-3 text-lg font-semibold">Promociones</h1>

      <Table
        trTitles={[
          "Nombre",
          "Membresía",
          "Bebidas",
          "Comidas",
          "Juegos",
          "Descuento",
          "Puntos",
        ]}
      >
        {promotions.map((promo) => (
          <tr key={promo.id}>
            <td className="border-b border-gray-300 p-3">{promo.name}</td>
            <td className="border-b border-gray-300 p-3">
              {promo.memberships
                ?.map((membership) => membership.name)
                .join(", ")}
            </td>
            <td className="border-b border-gray-300 p-3">
              {promo.consumptions
                ?.filter(
                  (consumption) =>
                    consumption.consumption?.consumptionCategory?.name ===
                    "Bebida"
                )
                .map((consumption) => consumption.consumption?.name)
                .join(", ")}
            </td>
            <td className="border-b border-gray-300 p-3">
              {promo.consumptions
                ?.filter(
                  (consumption) =>
                    consumption.consumption?.consumptionCategory?.name ===
                    "Comida"
                )
                .map((consumption) => consumption.consumption?.name)
                .join(", ")}
            </td>
            <td className="border-b border-gray-300 p-3">
              {promo.consumptions
                ?.filter(
                  (consumption) =>
                    consumption.consumption?.consumptionCategory?.name ===
                    "Juego"
                )
                .map((consumption) => consumption.consumption?.name)
                .join(", ")}
            </td>
            <td className="border-b border-gray-300 p-3">{promo.discount}%</td>
            <td className="border-b border-gray-300 p-3">{promo.points}</td>
            <td className="border-b border-gray-300 p-3">Eliminar</td>
          </tr>
        ))}
      </Table>
    </section>
  );
}

function Users({ users, totalUsers }: { users: User[]; totalUsers: number }) {
  return (
    <section>
      <h1 className="p-3 text-lg font-semibold">Usuarios</h1>
      <Table trTitles={["", "Nombre", "ID"]}>
        {users.map((user, i) => (
          <tr key={user.id}>
            <td className="border-b border-gray-300 p-3">{i + 1}</td>
            <td className="border-b border-gray-300 p-3">
              <Link href={`/user/${user.id}`}>{user.name}</Link>
            </td>
            <td className="border-b border-gray-300 p-3">{user.id}</td>
          </tr>
        ))}
      </Table>
    </section>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getServerSession(context.req, context.res, authOptions);

  if (session?.user.role === "Admin") {
    const ssg = createProxySSGHelpers({
      router: appRouter,
      ctx: { prisma, session: null },
      transformer: superjason,
    });

    await ssg.membership.getAllMemberships.prefetch();
    await ssg.consumptions.getConsumptionsGrouped.prefetch();
    await ssg.promotions.getAllPromotions.prefetch();
    await ssg.user.getAllUsers.prefetch();

    return {
      props: {
        trpcState: ssg.dehydrate(),
      },
    };
  }

  return {
    redirect: {
      destination: "/",
      permanent: false,
    },
  };
};
