import { type GetServerSideProps } from "next";
import Head from "next/head";
import React, { useEffect, useRef, useState } from "react";
import { io, type Socket } from "socket.io-client";
import { api } from "~/utils/api";
import { prisma } from "~/server/db";

import Nav from "~/components/Nav";
import Table from "~/components/Table";

import { toggleFullScreen } from "~/utils/fullScreen";

import type {
  ClientToServerEvents,
  // GameOver,
  ServerToClientEvents,
} from "../../types/socketio";
import type { Consumption } from "~/types/model";

type Props = {
  allGames: Consumption[];
};

export default function Ranking({ allGames }: Props) {
  const ctx = api.useContext();

  const [gameActive, setGameActive] = useState<Consumption | null>(
    allGames[0] ?? null
  );
  const [fullScreenActive, setFullScreenActive] = useState<boolean>(false);

  const divRef = useRef<HTMLDivElement>(null);

  const gameRanking = api.ranking.getGameRankingById.useQuery({
    id: gameActive?.id ?? "",
  });

  useEffect((): any => {
    const socket: Socket<ServerToClientEvents, ClientToServerEvents> = io(
      "http://localhost:3000",
      {
        path: "/api/socketio",
      }
    );

    socket.on("connect", () => {
      console.log("SOCKET CONNECTED!");
      // setConnected(true);
    });

    socket.on("gameOver", () => {
      void ctx.ranking.getGameRankingById.invalidate();
    });

    if (socket) return () => socket.disconnect();
  }, [ctx.ranking.getGameRankingById]);

  useEffect(() => {
    const getFullScreenMode = () => {
      if (document.fullscreenElement) {
        setFullScreenActive(true);
      } else {
        setFullScreenActive(false);
      }
    };

    document.addEventListener("fullscreenchange", getFullScreenMode);

    return () =>
      document.removeEventListener("fullscreenchange", getFullScreenMode);
  }, []);

  if (!gameRanking.data) return <div>404</div>;

  return (
    <div>
      <Head>
        <title>Bar de juegos - Ranking</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Nav />

      <main className="min-h-screen  bg-neutral-200 px-4 sm:px-10">
        <h1 className="pt-6 font-light">Elige un ranking:</h1>
        <ul className="flex flex-wrap gap-2 py-6">
          {allGames.map((game) => (
            <li
              key={game.id}
              onClick={() => {
                // getGameRanking(game.id, setUsersRanking);
                setGameActive(game);
              }}
              className={`cursor-pointer rounded ${
                gameActive?.name === game.name
                  ? "bg-neutral-900 text-neutral-100"
                  : "bg-green-500 text-neutral-900"
              }  px-4 py-0 font-semibold`}
            >
              {game.name}
            </li>
          ))}
        </ul>

        <div
          className={`bg-neutral-200 ${fullScreenActive ? "p-10" : "pb-6"}`}
          ref={divRef}
        >
          <article>
            <h5 className="pb-2 font-medium">
              RANKING {gameActive?.name.toUpperCase()}
            </h5>
            <Table trTitles={["JUGADOR", "PARTIDOS GANADOS"]}>
              {gameRanking.data.map((user) => (
                <tr key={user.name}>
                  <td className="w-1/2 border-b border-gray-300 p-3">
                    {user.name}
                  </td>
                  <td className="w-1/2 border-b border-gray-300 p-3">
                    {user.total}
                  </td>
                </tr>
              ))}
            </Table>
          </article>
        </div>

        <div className="flex justify-end">
          <button
            type="submit"
            onClick={() => void toggleFullScreen(divRef)}
            className="rounded bg-neutral-900 p-2 text-neutral-100"
          >
            Pantalla Completa
          </button>
        </div>
      </main>
    </div>
  );
}

export const getServerSideProps: GetServerSideProps = async () => {
  const allGames = await prisma.consumption.findMany({
    where: { consumptionCategoryId: "cleubcq1e0005e788cizbtne3" },
  });

  return {
    props: {
      allGames,
    },
  };
};
