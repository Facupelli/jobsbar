import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "~/utils/api";
import { useForm } from "react-hook-form";
import { useRouter } from "next/router";
import { useCallback, useEffect, useState } from "react";
import axios from "axios";
import Nav from "~/components/Nav/Nav";

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Jobs Bar</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Nav />

      <main className="flex h-[calc(100vh_-_70px)] flex-col items-center justify-center">
        <h1 className="text-6xl font-bold">JOBS</h1>
        <LoginInput />
      </main>
    </>
  );
};

export default Home;

type InputData = {
  id: string;
};

function LoginInput() {
  const {
    register,
    watch,
    formState: { errors },
    setFocus,
    reset,
    setValue,
  } = useForm<InputData>();
  const router = useRouter();

  const [submitError, setError] = useState<string>("");

  const id = watch("id");

  const { mutate } = api.user.getUserById.useMutation();

  const onSubmit = useCallback(
    async (id: string) => {
      mutate(
        { id },
        {
          onSuccess: (data) => {
            if (!data?.success && data?.message) {
              setError(data?.message);
              setValue("id", "");
            }

            console.log(data);
            if (data?.success) {
              router.push(`/user/${id}`);
            }
            reset({ id: "" });
          },
          onError: (err) => {
            console.log("catch", err);
            setError(err.message);
            setValue("id", "");
          },
        }
      );
    },
    [reset, router, setValue]
  );

  useEffect(() => {
    if (id?.length === 25) {
      onSubmit(id);
    }
  }, [id, onSubmit]);

  useEffect(() => {
    setFocus("id");
  }, [setFocus, submitError]);

  return (
    <>
      {/* {submitError && !!submitError && (
        <Modal
          isOpen={!!submitError}
          handleCloseModal={() => setError("")}
          error
        >
          <p>{submitError}</p>
        </Modal>
      )} */}
      <form>
        <section>
          <input
            type="password"
            {...register("id")}
            autoFocus
            role="id-input"
          />
        </section>
      </form>
    </>
  );
}
